Signals
							      Marcin Borkowski
				marcinbo (at) mini (dot) pw (dot) edu (dot) pl
------------------------------------------------------------------------------

Task:

The main application creates 'n' child processes and controls their work
through signals. The signal SIGUSR1 is sent to enable child process output
to the screen and the signal SIGUSR2 - to disable it. These two signals
are sent alternately in a loop. There is a delay of 'k' second(s) before
SIGUSR1 is sent and 'p' seconds before SIGUSR2.

Every child process does the same work. They choose random interval 'm'
(<5,10> sec.) and later (in a loop) they attempt to write a message
"Success [PID]" on the screen and then sleep for 'm' second(s).
If the last signal received by a child process was SIGUSR1 - it can write,
but if SIGUSR2 - the output is cancelled.

The loop (write attempt and sleeping) is repeated at most 'l' times
by each child. Each child can be terminated at any time by signal
SIGINT (Ctrl-C). The sleeping time of a parent nor any child process
should not be shortened by delivery (and handling) of signals.

Numbers 'n','k','p' and 'l' are passed to the program as a startup
parameters.

Solution layout:

1.Analyze program parameters
2.Fork children process
Parent process
3p.Sleep k sec.
4p.Send signal USR1
5p.Sleep p sec.
6p.Send signal USR2
7p.Go back to 3p.
Each child process
3c.Choose random 'm' value
4c.Sleep m sec.
5c.If signaled USR1 print "Success".
6c.As long as number of executed iteration is less than 'l' go to 3c.

First stage of solution:
1.Prepare basic makefile
2.Analyze commandline, if necessary print USAGE information.

===================================================================

---Makefile--------------------------------------------------------
all: signals
signals: signals.c	
	gcc -Wall -o signals signals.c
.PHONY: clean
clean:
	rm signals
---signals.c-------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>

void usage(void);


void usage(void){
	fprintf(stderr,"USAGE: signals n k p l\n");
	fprintf(stderr,"n - number of children\n");
	fprintf(stderr,"k - Interval before SIGUSR1\n");
	fprintf(stderr,"p - Interval before SIGUSR2\n");
	fprintf(stderr,"l - lifetime of child in cycles\n");
}

int main(int argc, char** argv) {
	int n, k, p, l;

	if(argc!=5) {
		usage();
		return EXIT_FAILURE;
	}

	n = atoi(argv[1]);
	k = atoi(argv[2]);
	p = atoi(argv[3]);
	l = atoi(argv[4]);

	if (n<=0 || k<=0 || p<=0 || l<=0) {
		usage();
		return EXIT_FAILURE;
	}

	return EXIT_SUCCESS;
}
-------------------------------------------------------------------
Second stage:
1.Add a dummy function for children (terminates immediately)
2.Write a function to fork children
===================================================================
---signals.c-------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

void child_work();
void create_children(int n);
void usage(void);

void child_work(void) {

	printf("[%d] Terminates \n",getpid());
}

void create_children(int n ) {
	while (n-->0) {
		switch (fork()) {
			case 0:
				child_work();
				exit(EXIT_SUCCESS);

			case -1:
				perror("Fork:");
				exit(EXIT_FAILURE);
		}
	}
}

void usage(void){
	fprintf(stderr,"USAGE: signals n k p l\n");
	fprintf(stderr,"n - number of children\n");
	fprintf(stderr,"k - Interval before SIGUSR1\n");
	fprintf(stderr,"p - Interval before SIGUSR2\n");
	fprintf(stderr,"l - lifetime of child in cycles\n");
}

int main(int argc, char** argv) {
	int n, k, p, l;

	if(argc!=5) {
		usage();
		return EXIT_FAILURE;
	}
	n = atoi(argv[1]);
	k = atoi(argv[2]);
	p = atoi(argv[3]);
	l = atoi(argv[4]);
	if (n<=0 || k<=0 || p<=0 || l<=0) {
		usage();
		return EXIT_FAILURE;
	}
	create_children(n);
	return EXIT_SUCCESS;
}
-------------------------------------------------------------------
Please notice that parent process terminates before children do.

Third stage:
1. Wait for children in the main process
2. Prepare SIGCHLD handler for the main process
===================================================================
---signals.c-------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>

void child_work();
void create_children(int n);
int sethandler( void (*f)(int), int sigNo);
void sigchld_handler(int sig);
void usage(void);

int sethandler( void (*f)(int), int sigNo) {
	struct sigaction act;
	memset(&act, 0, sizeof(struct sigaction));
	act.sa_handler = f;
	if (-1==sigaction(sigNo, &act, NULL))
		return -1;
	return 0;
}

void sigchld_handler(int sig) {
	pid_t pid;
	for(;;){
		pid=waitpid(0, NULL, WNOHANG);
		if(pid==0) return;
		if(pid<=0) {
			if(errno==ECHILD) return;
			perror("waitpid:");
			exit(EXIT_FAILURE);
		}
	}
}

void child_work() {
	printf("[%d] Terminates \n",getpid());
}

void create_children(int n) {
	while (n-->0) {
		switch (fork()) {
			case 0:
				child_work();
				exit(EXIT_SUCCESS);

			case -1:
				perror("Fork:");
				exit(EXIT_FAILURE);
		}
	}
}

void usage(void){
	fprintf(stderr,"USAGE: signals n k p l\n");
	fprintf(stderr,"n - number of children\n");
	fprintf(stderr,"k - Interval before SIGUSR1\n");
	fprintf(stderr,"p - Interval before SIGUSR2\n");
	fprintf(stderr,"l - lifetime of child in cycles\n");
}

int main(int argc, char** argv) {
	int n, k, p, l;
	pid_t pid;
	if(argc!=5) {
		usage();
		return EXIT_FAILURE;
	}
	n = atoi(argv[1]);
	k = atoi(argv[2]);
	p = atoi(argv[3]);
	l = atoi(argv[4]);
	if (n<=0 || k<=0 || p<=0 || l<=0) {
		usage();
		return EXIT_FAILURE;
	}
	if(sethandler(sigchld_handler,SIGCHLD)) {
		perror("Seting parent SIGCHLD:");
		exit(EXIT_FAILURE);
	}

	create_children(n);

	for(;;){
		pid=wait(NULL);
		if(pid<0)
			switch (errno){
				case ECHILD:
					return EXIT_SUCCESS;
				case EINTR:
					continue;
				default:
					perror("wait:");
					exit(EXIT_FAILURE);
			}
	}
	return EXIT_SUCCESS;
}
-------------------------------------------------------------------

Fourth stage:
	Add SIGUSR1,2 handlers to the child process, to see that it works 
	add sleeping loop.
===================================================================
---signals.c-------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>

void child_work(int l);
void create_children(int n, int l);
int sethandler( void (*f)(int), int sigNo);
void child_handler(int sig);
void sigchld_handler(int sig);
void usage(void);

volatile sig_atomic_t last_signal = 0;

int sethandler( void (*f)(int), int sigNo) {
	struct sigaction act;
	memset(&act, 0, sizeof(struct sigaction));
	act.sa_handler = f;
	if (-1==sigaction(sigNo, &act, NULL))
		return -1;
	return 0;
}

void child_handler(int sig) {
	printf("[%d] received signal %d\n", getpid(), sig);
	last_signal = sig;
}

void sigchld_handler(int sig) {
	pid_t pid;
	for(;;){
		pid=waitpid(0, NULL, WNOHANG);
		if(pid==0) return;
		if(pid<=0) {
			if(errno==ECHILD) return;
			perror("waitpid:");
			exit(EXIT_FAILURE);
		}
	}
}

void child_work(int l) {
	while(l-- > 0){
		sleep(2);
	}
	printf("[%d] Terminates \n",getpid());
}

void create_children(int n, int l) {
	while (n-->0) {
		switch (fork()) {
			case 0:
				if(sethandler(child_handler,SIGUSR1)) {
					perror("Seting child SIGUSR1:");
					exit(EXIT_FAILURE);
				}
				if(sethandler(child_handler,SIGUSR2)) {
					perror("Seting child SIGUSR2:");
					exit(EXIT_FAILURE);
				}
				child_work(l);
				exit(EXIT_SUCCESS);

			case -1:
				perror("Fork:");
				exit(EXIT_FAILURE);

		}
	}
}

void usage(void){
	fprintf(stderr,"USAGE: signals n k p l\n");
	fprintf(stderr,"n - number of children\n");
	fprintf(stderr,"k - Interval before SIGUSR1\n");
	fprintf(stderr,"p - Interval before SIGUSR2\n");
	fprintf(stderr,"l - lifetime of child in cycles\n");
}

int main(int argc, char** argv) {
	int n, k, p, l;

	if(argc!=5) {
		usage();
		return EXIT_FAILURE;
	}

	n = atoi(argv[1]);
	k = atoi(argv[2]);
	p = atoi(argv[3]);
	l = atoi(argv[4]);

	if (n<=0 || k<=0 || p<=0 || l<=0) {
		usage();
		return EXIT_FAILURE;
	}

	if(sethandler(SIG_IGN,SIGUSR1)) {
		perror("Seting parent SIGUSR1:");
		exit(EXIT_FAILURE);
	}
	if(sethandler(sigchld_handler,SIGCHLD)) {
		perror("Seting parent SIGCHLD:");
		exit(EXIT_FAILURE);
	}
	create_children(n, l);
	
	for(;;){
		if (kill(0, SIGUSR1)<0){
			perror("children_send");
			exit(EXIT_FAILURE);
		}
		sleep(1);
	}

	return EXIT_SUCCESS;
}
-------------------------------------------------------------------
Please note that sleep time of children is shorter than expected, why ?
If you omit SIG_IGN for SIGUSR1, main process terminates immediately, why ?

Last Stage:
	Add missing functionality
	Protect sleep time
===================================================================
---signals.c-------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>

void child_work(int l);
void create_children(int n, int l);
void parent_work(int k, int p);
int sethandler( void (*f)(int), int sigNo);
void child_handler(int sig);
void sigchld_handler(int sig);
void usage(void);

volatile sig_atomic_t last_signal = 0;

int sethandler( void (*f)(int), int sigNo) {
	struct sigaction act;
	memset(&act, 0, sizeof(struct sigaction));
	act.sa_handler = f;
	if (-1==sigaction(sigNo, &act, NULL))
		return -1;
	return 0;
}

void child_handler(int sig) {
	printf("[%d] received signal %d\n", getpid(), sig);
	last_signal = sig;
}

void sigchld_handler(int sig) {
	pid_t pid;
	for(;;){
		pid=waitpid(0, NULL, WNOHANG);
		if(pid==0) return;
		if(pid<=0) {
			if(errno==ECHILD) return;
			perror("waitpid:");
			exit(EXIT_FAILURE);
		}
	}
}

void child_work(int l) {
	int t,tt;

	srand(getpid());
	t = rand()%6+5; 

	while(l-- > 0){
		for(tt=t;tt>0;tt=sleep(tt));
		if (last_signal == SIGUSR1) printf("Success [%d]\n", getpid());
		else printf("Failed [%d]\n", getpid());
	}
	printf("[%d] Terminates \n",getpid());
}

void parent_work(int k, int p) {
	int t ;
	for(;;) {
		for(t=k;t>0;t=sleep(t));
		if (kill(0, SIGUSR1)<0){
			perror("children_send");
			exit(EXIT_FAILURE);
		}
		for(t=p;t>0;t=sleep(t));
		if (kill(0, SIGUSR2)<0){
			perror("children_send");
			exit(EXIT_FAILURE);
		}
	}
}

void create_children(int n, int l) {
	while (n-->0) {
		switch (fork()) {
			case 0:
				if(sethandler(child_handler,SIGUSR1)) {
					perror("Seting child SIGUSR1:");
					exit(EXIT_FAILURE);
				}
				if(sethandler(child_handler,SIGUSR2)) {
					perror("Seting child SIGUSR2:");
					exit(EXIT_FAILURE);
				}
				child_work(l);
				exit(EXIT_SUCCESS);

			case -1:
				perror("Fork:");
				exit(EXIT_FAILURE);

		}
	}
}

void usage(void){
	fprintf(stderr,"USAGE: signals n k p l\n");
	fprintf(stderr,"n - number of children\n");
	fprintf(stderr,"k - Interval before SIGUSR1\n");
	fprintf(stderr,"p - Interval before SIGUSR2\n");
	fprintf(stderr,"l - lifetime of child in cycles\n");
}

int main(int argc, char** argv) {
	int n, k, p, l;

	if(argc!=5) {
		usage();
		return EXIT_FAILURE;
	}

	n = atoi(argv[1]);
	k = atoi(argv[2]);
	p = atoi(argv[3]);
	l = atoi(argv[4]);

	if (n<=0 || k<=0 || p<=0 || l<=0) {
		usage();
		return EXIT_FAILURE;
	}

	if(sethandler(sigchld_handler,SIGCHLD)) {
		perror("Seting parent SIGCHLD:");
		exit(EXIT_FAILURE);
	}
	create_children(n, l);
	if(sethandler(SIG_IGN,SIGUSR1)) {
		perror("Seting parent SIGUSR1:");
		exit(EXIT_FAILURE);
	}
	if(sethandler(SIG_IGN,SIGUSR2)) {
		perror("Seting parent SIGUSR2:");
		exit(EXIT_FAILURE);
	}
	parent_work(k, p);

	return EXIT_SUCCESS;
}
-------------------------------------------------------------------
What about SIGINT, do we need to add anything ?
What do we need to terminate parent as soon as all its children are gone ?
